#!/usr/bin/env python
# - coding: utf-8 -
import re
import os
import urllib
import urllib2
import datetime
import getpass
import subprocess
from xml.dom.minidom import parseString
from argparse import ArgumentParser
from ConfigParser import SafeConfigParser
import csv
try:
    from hamster import db
    from hamster.lib import stuff
except ImportError as e:
    raise ImportError('Please install latest Hamster version. ' \
                      'https://github.com/projecthamster/hamster')
    

DEFAULT_CONFIG = {
    'export': {
        'regex': '/projects/(?P<project>\d+)/tickets/(?P<ticket>\d+)',
        'ac_url': 'https://pro.yinius.com',
        'api_key': '',
        'text_editor': 'vi'
    }
}


class ConfigManager(SafeConfigParser):
    def __init__(self, path, default_cfg={}):
        SafeConfigParser.__init__(self)
        self._path = path
        self._default_cfg = default_cfg


    def load_config(self):
        if os.path.exists(self._path):
            self.readfp(open(self._path))

        for section in self._default_cfg:
            self._check_section(section)
            for option in self._default_cfg[section]:
                self._check_option(section, option,
                                   str(self._default_cfg[section][option]))


    def save_config(self):
        self.write(open(self._path, 'w'))


    def _check_section(self, section):
        if not self.has_section(section):
            self.add_section(section)


    def _check_option(self, section, option, default):
        if not self.has_option(section, option):
            self.set(section, option, default)


class Exporter:
    def __init__(self, date, cfg, temp_file):
        self._cfg = cfg
        self._storage = db.Storage()
        self._facts = self._storage.get_facts(date, date, '')
        self._date = date
        self._temp_file = temp_file
        
        self._prepare_facts()


    def create_temp_file(self):
        csv_header = ['duration', 'description', 'name', 'ticket']
        with open(self._temp_file, 'w') as tmp_file:
            tmp_writer = csv.DictWriter(tmp_file, csv_header, 
                                        extrasaction='ignore')
            tmp_writer.writeheader()
            for f in self._facts:
                tmp_writer.writerow(f)
        # Clear the facts since they're no longer needed
        del self._facts[:]


    def load_temp_file(self):
        with open(self._temp_file, 'r') as temp_file:
            temp_reader = csv.DictReader(temp_file)
            for r in temp_reader:
                self._facts.append(r)


    def _prepare_facts(self):
        facts_grouped = {}

        for f in self._facts:
            project, ticket = self._get_project_ticket(f['name'])
            ticket_id = self._fetch_ticket_id(project, ticket)
            if not ticket_id:
                # No valid AC url found
                continue
            f['ticket'] = ticket_id
            facts_grouped.setdefault(f['name'], []).append(f)

        facts = {}
        for k, values in facts_grouped.iteritems():
            for val in values:
                desc = val['description'] or ''
                if k not in facts:
                    facts[k] = {
                        'description': [desc],
                        'delta': val['delta'],
                        'ticket': val['ticket'],
                        'name': val['name'],
                    }
                else:
                    facts[k]['delta'] += val['delta']
                    facts[k]['description'].append(desc)
            facts[k]['description'] = ", ".join(set(facts[k]['description']))
            facts[k]['duration'] = stuff.format_duration(facts[k]['delta'], human=False)
        self._facts = facts.values()


    def submit_activities(self):
        for fact in self._facts:
            self.submit_activity(fact)


    def submit_activity(self, fact):
        ac_url = self._cfg.get('export', 'ac_url')
        api_key = self._cfg.get('export', 'api_key')
        project, ticket = self._get_project_ticket(fact['name'])
        req = urllib2.Request('%s/api.php?path_info=/projects/%s/time/add&token=%s' % \
                              (ac_url, project, api_key))
        user_id = api_key.split('-')
        try:
            user_id = user_id[0]
        except IndexError:
            raise Exception("Couldn't extract user ID from API key")
        context = {
            "submitted": "submitted",
            "time[user_id]": user_id,
            "time[value]": fact['duration'],
            "time[record_date]": self._date.strftime("%Y-%m-%d"),
            "time[body]": fact['description'],
            "time[parent_id]": fact['ticket'],
            "time[billable_status]": 1,
        }

        context = urllib.urlencode(context)
        urllib2.urlopen(req, context)


    def _get_project_ticket(self, url):
        regex = self._cfg.get('export', 'ac_url') + \
                self._cfg.get('export', 'regex')
        url = re.match(regex, url)
        if url:
            data = url.groupdict()
            return data.get('project'), data.get('ticket')
        return False, False


    def _fetch_ticket_id(self, proj_id, ticket_id_in_proj):
        ac_url = self._cfg.get('export', 'ac_url')
        api_key = self._cfg.get('export', 'api_key')
        req = urllib2.Request('%s/api.php?path_info=/projects/%s/tickets/%s/&token=%s&format=xml' % \
                              (ac_url, proj_id, ticket_id_in_proj, api_key))

        try:
            f = urllib2.urlopen(req)
        except urllib2.URLError as e:
            print "Couldn't fetch ticket ID from %s. %s." % (ticket_id_in_proj, 
                                                             e.reason)
            return False #TODO NEED POPUP ALERT!
        result = parseString(f.read())
        ticket_id = result.getElementsByTagName('id')[0].childNodes[0].nodeValue
        return ticket_id


if __name__ == "__main__":
    # Load configuration
    home_dir = os.path.realpath(os.path.expanduser("~"))
    conf_file = home_dir + '/.hamster2ac'
    config = ConfigManager(conf_file, DEFAULT_CONFIG)
    config.load_config()
    config.save_config()

    # Prepare parser
    parser = ArgumentParser()
    parser.add_argument('-t', '--today', dest='today', action="store_true", 
                        help="Takes today's activities (default)")
    parser.add_argument('-d', '--date', dest='date', help="ISO format")
    args = parser.parse_args()
    if args.date:
        args.date = datetime.datetime.strptime(args.date, "%Y-%m-%d").date()
    else:
        args.date = datetime.date.today()

    temp_file = '/tmp/ac_hamster_temp.csv'
    exp = Exporter(args.date, config, temp_file)
    exp.create_temp_file()
    subprocess.call([config.get('export', 'text_editor'), temp_file])
    exp.load_temp_file()
    exp.submit_activities()
